name: CD with Gradle and Docker

on:
  push:
    branches:
      - 'main'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: ☕️ set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: "👏🏻 grant execute permission for gradlew"
        run: chmod +x gradlew

      - name: "🐘 build with Gradle (without test)"
        run: ./gradlew clean build -x test --stacktrace

      - name: "🐳 Docker login"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "🔐 Copy Secret"
        env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application-secret.yml
        run: |
          mkdir -p $OCCUPY_SECRET_DIR
          echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME

      - name: "🐳 Docker build & push"
        run: |
          docker build -f Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .

          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      # AWS 인증
      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "🚀 deploy to server"
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.AWS_EC2_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying application" \
            --parameters 'commands=[
              "cd /home/ubuntu/${{ github.event.repository.name }}",
              "sudo git pull",
              "echo \"DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}\" > .env",
              "echo \"DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}\" >> .env",
              "echo \"PROD_DATASOURCE_URL=${{ secrets.PROD_DATASOURCE_URL }}\" >> .env",
              "echo \"PROD_DATASOURCE_USERNAME=${{ secrets.PROD_DATASOURCE_USERNAME }}\" >> .env",
              "echo \"PROD_DATASOURCE_PASSWORD=${{ secrets.PROD_DATASOURCE_PASSWORD }}\" >> .env",
              "sudo docker-compose -f docker-compose-prod.yml --env-file .env pull",
              "sudo docker-compose -f docker-compose-prod.yml --env-file .env down || true",
              "sudo docker-compose -f docker-compose-prod.yml --env-file .env up -d",
              "sudo docker image prune -f"
            ]' \
            --output text
